#include <WiFi.h>
#include <HTTPClient.h>
#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>

Adafruit_MPU6050 mpu;

// -------- Configura√ß√£o de Rede --------
const char* ssid = "Wokwi-GUEST";
const char* password = "";

// ‚úÖ Use HTTP (sem HTTPS) ‚Äî funciona no Wokwi
const char* serverUrl = "https://fastapi-6wmq.onrender.com/event";

// -------- Pinos --------
#define LED_VERDE 26
#define LED_VERMELHO 27
#define BOTAO_FALHA 25

// -------- Controle --------
enum Estado { NORMAL, FALHA, RECUPERADO };
Estado estadoAtual = NORMAL;

unsigned long ultimaFalha = 0;
const unsigned long intervaloReenvio = 30000; // 30 segundos

// -------- Prot√≥tipo --------
void enviarEvento(String status);

void setup() {
  Serial.begin(115200);
  pinMode(LED_VERDE, OUTPUT);
  pinMode(LED_VERMELHO, OUTPUT);
  pinMode(BOTAO_FALHA, INPUT_PULLUP);

  Serial.println("üîå Conectando ao Wi-Fi...");
  WiFi.begin(ssid, password, 6);
  while (WiFi.status() != WL_CONNECTED) {
    delay(300);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ Conectado ao Wi-Fi!");
  Serial.println(WiFi.localIP());

  Wire.begin(21, 22);
  if (!mpu.begin()) {
    Serial.println("‚ùå MPU6050 n√£o encontrado!");
    while (1);
  }
  Serial.println("‚úÖ Sensor inicializado!");

  enviarEvento("online");
}

void loop() {
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  float intensidade = sqrt(
    a.acceleration.x * a.acceleration.x +
    a.acceleration.y * a.acceleration.y +
    a.acceleration.z * a.acceleration.z
  );

  bool falhaManual = digitalRead(BOTAO_FALHA) == LOW;
  bool falhaDetectada = (falhaManual || intensidade < 9.5 || intensidade > 10.5);

  if (falhaDetectada && estadoAtual == NORMAL) {
    estadoAtual = FALHA;
    digitalWrite(LED_VERDE, LOW);
    digitalWrite(LED_VERMELHO, HIGH);
    enviarEvento("falha");
    ultimaFalha = millis();
  }

  if (falhaDetectada && estadoAtual == FALHA &&
      millis() - ultimaFalha > intervaloReenvio) {
    enviarEvento("falha");
    ultimaFalha = millis();
  }

  if (!falhaDetectada && estadoAtual == FALHA) {
    estadoAtual = RECUPERADO;
    enviarEvento("ok");
    digitalWrite(LED_VERDE, HIGH);
    digitalWrite(LED_VERMELHO, LOW);
  }

  delay(500);
}

void enviarEvento(String status) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;
    http.begin(serverUrl); // HTTP simples
    http.setFollowRedirects(HTTPC_DISABLE_FOLLOW_REDIRECTS);
    http.addHeader("Content-Type", "application/json");

    String payload = "{\"device\":\"MOTOR_A\",\"status\":\"" + status + "\"}";
    int httpCode = http.POST(payload);

    Serial.println("üì° Enviado: " + payload);
    Serial.println("‚û°Ô∏è HTTP Code: " + String(httpCode));

    if (httpCode > 0) {
      String resposta = http.getString();
      Serial.println("üîÅ Resposta: " + resposta);
    } else {
      Serial.println("‚ö†Ô∏è Falha ao enviar para servidor!");
    }

    http.end();
  } else {
    Serial.println("üö´ Wi-Fi desconectado!");
  }
}
